import Head from 'next/head'
import Link from 'next/link'
import { GetStaticProps, InferGetStaticPropsType, NextPage } from 'next'
import * as contentful from 'contentful'
import { getSampleMaterialData } from '../lib/helper'

type Props = InferGetStaticPropsType<typeof getStaticProps>

export const getStaticProps: GetStaticProps<{ materials: Material[] }> = async (_) => {
  let materials: Material[]
  if (process.env.KEYCAP_NO_CONTENTFUL && process.env.NODE_ENV !== 'production') {
    materials = getSampleMaterialData()
  } else {
    materials = await fetchMaterialData()
  }

  return {
    props: {
      materials: materials,
    },
    revalidate: 30,
  }
}

const fetchMaterialData = async () => {
  if (!(process.env.KEYCAP_CONTENTFUL_SPACE_ID && process.env.KEYCAP_CONTENTFUL_ACCESS_TOKEN)) {
    throw new Error('ContentfulのSpace ID・アクセストークンを環境変数で設定してください')
  }

  const contentfulClient = contentful.createClient({
    space: process.env.KEYCAP_CONTENTFUL_SPACE_ID,
    accessToken: process.env.KEYCAP_CONTENTFUL_ACCESS_TOKEN,
  })

  try {
    const response = await contentfulClient.getEntries<ContentfulMaterialFields>({
      content_type: 'keycap-material',
    })

    const lastUpdate = response.items.reduce((a, b) =>
      new Date(a.sys.updatedAt) > new Date(b.sys.updatedAt) ? a : b
    ).sys.updatedAt
    console.log(
      `Fetched ${response.items.length} items from Contentful (Last update = ${lastUpdate})`
    )

    return response.items
      .sort((a, b) => +new Date(a.sys.updatedAt) - +new Date(b.sys.updatedAt))
      .map((item) => ({
        id: item.sys.id,
        title: item.fields.title,
        colorHex: item.fields.colorHex,
        colorType: item.fields.colorType,
        goodCount: item.fields.goodCount,
        iconUrl: item.fields.iconUrl || '/sample/icon-sample.jpg',
        bgImageUrl: item.fields.bgImageUrl || '/sample/bg-sample1.jpg',
      }))
  } catch (e) {
    throw new Error(`素材リストの取得に失敗しました: ${e.stackTrace}`)
  }
}

export const Home: NextPage<Props> = (props) => {
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <header>
        <h1>#ONECAP</h1>
        <p>
          #ONECAPは、廃棄プラスチックを使ってキーキャップを自作するオープンソースコミュニティです。
        </p>
        <p>
          家庭やオフィスで出るプラゴミを原材料としたユニークなキーキャップを製作すると同時に、その方法や金型のデータを公開し、ワークショップなど通じて、仲間の輪を広げる活動を行なっています。
        </p>
      </header>

      <main>
        <section>
          <h2>ONECAPの特徴</h2>
          <ul>
            <li>recyclable</li>
            <li>unique texture</li>
            <li>circular design</li>
            <li>produced locally</li>
          </ul>
        </section>

        <section>
          <h2>Resource</h2>
          <p>金型のデータを公開し、同様の活動を行おうとする人を応援します</p>

          <Link href='#'>
            <a>金型データをDLする</a>
          </Link>
        </section>

        <section>
          <h2>Library</h2>

          <p>キーキャップに使えそうな素材のライブラリです</p>
          <ul className='filter'>
            <li>Red</li>
            <li>Blue</li>
            <li>Green</li>
            <li>Black</li>
            <li>White</li>
          </ul>

          {props.materials.map((material) => (
            <div className='material' key={`material-${material.id}`}>
              <p>{material.title}</p>
              <p>{material.colorHex}</p>
              <p>{material.goodCount}</p>
            </div>
          ))}

          <Link href='#'>
            <a>素材を追加する</a>
          </Link>
        </section>
      </main>

      <footer>{/* TODO: 書く */}</footer>
    </>
  )
}

export default Home

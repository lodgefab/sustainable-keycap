import Head from 'next/head'
import { GetStaticProps, InferGetStaticPropsType, NextPage } from 'next'
import * as contentful from 'contentful'
import { getSampleMaterialData } from '../lib/helper'
import { Home } from '../components/organisms/Home'
import React, { createContext } from 'react'

type Props = InferGetStaticPropsType<typeof getStaticProps>

export const getStaticProps: GetStaticProps<{ materials: Material[] }> = async (_) => {
  let materials: Material[]
  if (process.env.KEYCAP_NO_CONTENTFUL && process.env.NODE_ENV !== 'production') {
    materials = getSampleMaterialData()
  } else {
    materials = await fetchMaterialData()
  }

  return {
    props: {
      materials: materials,
    },
    revalidate: 30,
  }
}

const fetchMaterialData = async () => {
  if (!(process.env.KEYCAP_CONTENTFUL_SPACE_ID && process.env.KEYCAP_CONTENTFUL_ACCESS_TOKEN)) {
    throw new Error('ContentfulのSpace ID・アクセストークンを環境変数で設定してください')
  }

  const contentfulClient = contentful.createClient({
    space: process.env.KEYCAP_CONTENTFUL_SPACE_ID,
    accessToken: process.env.KEYCAP_CONTENTFUL_ACCESS_TOKEN,
  })

  try {
    const response = await contentfulClient.getEntries<ContentfulMaterialFields>({
      content_type: 'keycap-material',
    })

    const lastUpdate = response.items.reduce((a, b) =>
      new Date(a.sys.updatedAt) > new Date(b.sys.updatedAt) ? a : b
    ).sys.updatedAt
    console.log(
      `Fetched ${response.items.length} items from Contentful (Last update = ${lastUpdate})`
    )

    return response.items
      .sort((a, b) => +new Date(a.sys.updatedAt) - +new Date(b.sys.updatedAt))
      .map((item) => ({
        id: item.sys.id,
        title: item.fields.title,
        colorHex: item.fields.colorHex,
        colorType: item.fields.colorType,
        goodCount: item.fields.goodCount,
        iconUrl: item.fields.iconUrl || '/sample/icon-sample.jpg',
        bgImageUrl: item.fields.bgImageUrl || '/sample/bg-sample1.jpg',
      }))
  } catch (e) {
    throw new Error(`素材リストの取得に失敗しました: ${e.stackTrace}`)
  }
}

export const MaterialContext: React.Context<Material[]> = createContext([])

export const Index: NextPage<Props> = (props) => {
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <MaterialContext.Provider value={props.materials}>
        <Home />
      </MaterialContext.Provider>
    </>
  )
}

export default Index
